#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

#define ARRAY_SIZE 100

int main(int argc, char** argv) {
    int process_id, num_processes;
    int partial_sum = 0, global_sum = 0;
    int data[ARRAY_SIZE];

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &process_id);
    MPI_Comm_size(MPI_COMM_WORLD, &num_processes);

    int elements_per_process = ARRAY_SIZE / num_processes;
    int local_data[elements_per_process];

    if (process_id == 0) {
        for (int i = 0; i < ARRAY_SIZE; i++) data[i] = i + 1;
    }

    MPI_Scatter(data, elements_per_process, MPI_INT, local_data, elements_per_process, MPI_INT, 0, MPI_COMM_WORLD);

    for (int i = 0; i < elements_per_process; i++) {
        partial_sum += local_data[i];
    }

    MPI_Reduce(&partial_sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    if (process_id == 0) {
        printf("Computed Global Sum: %d\n", global_sum);
    }

    MPI_Finalize();
    return 0;
}
