#include <iostream>
#include <cstdlib>
#include <ctime>

#define SIZE 1024

__global__ void performBitonicSort(int* arr) {
    unsigned int threadId = threadIdx.x + blockIdx.x * blockDim.x;

    for (unsigned int stage = 2; stage <= SIZE; stage <<= 1) {
        for (unsigned int step = stage / 2; step > 0; step >>= 1) {
            unsigned int index = 2 * threadId - (threadId & (step - 1));
            
            if (index + step < SIZE) {
                bool direction = ((index & stage) == 0);  // Ascending if 0

                if ((arr[index] > arr[index + step]) == direction) {
                    int swapTemp = arr[index];
                    arr[index] = arr[index + step];
                    arr[index + step] = swapTemp;
                }
            }
            __syncthreads();
        }
    }
}

int main() {
    int hostArr[SIZE];
    int* deviceArr;

    std::srand(static_cast<unsigned int>(std::time(nullptr)));
    for (int i = 0; i < SIZE; ++i) {
        hostArr[i] = std::rand() % 10000;
    }

    cudaMalloc((void**)&deviceArr, SIZE * sizeof(int));
    cudaMemcpy(deviceArr, hostArr, SIZE * sizeof(int), cudaMemcpyHostToDevice);

    performBitonicSort<<<1, SIZE / 2>>>(deviceArr);

    cudaMemcpy(hostArr, deviceArr, SIZE * sizeof(int), cudaMemcpyDeviceToHost);

    std::cout << "Top 10 sorted elements (GPU): ";
    for (int i = 0; i < 10; ++i) std::cout << hostArr[i] << " ";
    std::cout << "\n";

    cudaFree(deviceArr);
    return 0;
}
